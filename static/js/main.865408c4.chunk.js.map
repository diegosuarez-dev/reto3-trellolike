{"version":3,"sources":["services/redux/actions.js","components/Header/Header.jsx","components/TodoForm/TodoForm.jsx","components/ListForm/ListForm.jsx","components/ListsPanel/ListsPanel.jsx","App.js","serviceWorker.js","services/redux/reducer.js","services/redux/store.js","index.js"],"names":["addListAction","dispatch","text","listId","type","payload","editListAction","deleteListAction","addTodoAction","title","description","todoId","Date","now","completed","editTodoAction","dragTodoAction","todoText","todoDescription","todoCompleted","prevListId","newListId","switchTodoPositionAction","startTodoText","endTodoText","startTodoDescription","endTodoDescription","startTodoId","endTodoId","startTodoCompleted","endTodoCompleted","deleteTodoAction","toggleCompleteAction","displayHeaderInputAction","displayListInputAction","displayTodoEditInputAction","displayListEditInputAction","connectedHeader","connect","state","headerInputDisplay","lists","addList","displayHeaderInput","props","input","onKeyUpHandle","e","keyCode","target","value","trim","lastIndex","length","className","placeholder","onKeyUp","autoFocus","onClick","connectedForm","addTodo","editTodo","useState","setTitle","setDescription","onSubmit","event","preventDefault","role","console","log","name","onChange","required","editList","connectedPanel","deleteList","deleteTodo","dragTodo","switchTodoPosition","toggleCompleted","displayListInput","displayTodoEditInput","displayListEditInput","draggedItem","map","list","key","onDragOver","onDragEnter","onDrop","listEditionInputDisplay","todos","todo","id","draggable","onDragStart","editInputDisplay","listInputDisplay","App","Boolean","window","location","hostname","match","initialState","reducer","action","filter","newStateDrag","newStateSwitch","firstTodoSwitch","indexOfFirstTodoSwitch","findIndex","element","secondTodoSwitch","indexOfSecondTodoSwitch","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.865408c4.chunk.js","sourcesContent":["export const addListAction = (dispatch) => (text, listId) =>\r\n    dispatch({\r\n        type: 'ADD_LIST',\r\n        payload: text,\r\n        listId: listId\r\n    });\r\n\r\nexport const editListAction = (dispatch) => (text, listId) =>\r\n    dispatch({\r\n        type: 'EDIT_LIST',\r\n        payload: text,\r\n        listId: listId\r\n    });\r\n\r\nexport const deleteListAction = (dispatch) => (listId) =>\r\n    dispatch({\r\n        type: 'DELETE_LIST',\r\n        listId: listId\r\n    });\r\n\r\nexport const addTodoAction = (dispatch) => (title, description, listId) =>\r\n    dispatch({\r\n        type: 'ADD_TODO',\r\n        title: title,\r\n        description: description,\r\n        listId: listId,\r\n        todoId: Date.now(),\r\n        completed: false\r\n    });\r\n\r\nexport const editTodoAction = (dispatch) => (title, description, todoId, listId) => \r\n    dispatch({\r\n        type: 'EDIT_TODO',\r\n        title: title,\r\n        description: description,\r\n        todoId: todoId,\r\n        listId: listId\r\n    });\r\n\r\nexport const dragTodoAction = (dispatch) => (todoText, todoDescription, todoId, todoCompleted, prevListId, newListId) => {\r\n    if (prevListId !== newListId) {\r\n        dispatch({\r\n            type: 'DRAG_TODO_TO_OTHER_LIST',\r\n            todoText: todoText,\r\n            todoDescription: todoDescription,\r\n            todoId: todoId,\r\n            todoCompleted: todoCompleted,\r\n            prevListId: prevListId,\r\n            newListId: newListId\r\n        });\r\n    }\r\n};\r\n\r\nexport const switchTodoPositionAction = (dispatch) => (startTodoText, endTodoText, startTodoDescription, endTodoDescription, startTodoId, endTodoId, startTodoCompleted, endTodoCompleted, prevListId, newListId) => {\r\n    if (prevListId === newListId) {\r\n        dispatch({\r\n            type: 'SWITCH_TODOS_IN_SAME_LIST',\r\n            startTodoText: startTodoText,\r\n            endTodoText: endTodoText,\r\n            startTodoDescription: startTodoDescription,\r\n            endTodoDescription: endTodoDescription,\r\n            startTodoId: Date.now(), //Necesito asignar un nuevo ID para evitar conflicto de keys duplicados\r\n            endTodoId: Date.now() + 1, //Necesito asignar un nuevo ID para evitar conflicto de keys duplicados\r\n            startTodoCompleted: startTodoCompleted,\r\n            endTodoCompleted: endTodoCompleted,\r\n            prevListId: prevListId,\r\n        });\r\n    } \r\n}\r\n\r\nexport const deleteTodoAction = (dispatch) => (todoId, listId) =>\r\n    dispatch({\r\n        type: 'DELETE_TODO',\r\n        listId: listId,\r\n        todoId: todoId,\r\n    });\r\n\r\nexport const toggleCompleteAction = (dispatch) => (todoId, listId) =>\r\n    dispatch({\r\n        type: 'TOGGLE_COMPLETED_TODO',\r\n        listId: listId,\r\n        todoId: todoId,\r\n    });\r\n\r\nexport const displayHeaderInputAction = (dispatch) => () =>\r\n    dispatch({\r\n        type: 'TOGGLE_DISPLAY_HEADER_INPUT',\r\n    });\r\n\r\nexport const displayListInputAction = (dispatch) => (listId) =>\r\n    dispatch({\r\n        type: 'TOGGLE_DISPLAY_LIST_INPUT',\r\n        listId: listId,\r\n    });\r\n\r\nexport const displayTodoEditInputAction = (dispatch) => (todoId, listId) => \r\n    dispatch({\r\n        type: 'TOGGLE_DISPLAY_TODO_EDIT_INPUT',\r\n        todoId: todoId,\r\n        listId: listId\r\n    });\r\n\r\nexport const displayListEditInputAction = (dispatch) => (listId) => \r\n    dispatch({\r\n        type: 'TOGGLE_DISPLAY_LIST_EDIT_INPUT',\r\n        listId: listId\r\n    });","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addListAction, displayHeaderInputAction } from '../../services/redux/actions';\r\nimport './Header.css';\r\n\r\nconst Header = props => {\r\n    //Función que calcula el ID de las nuevas listas\r\n    const newListId = () => {\r\n        let lastIndex = props.lists.length - 1;\r\n        let lastListId = props.lists[lastIndex].listId;\r\n        return lastListId + 1;\r\n    }\r\n    //Función que gestiona la creación de la nueva lista en función del teclado\r\n    const onKeyUpHandle = (e) => {\r\n        if (e.keyCode === 13 && e.target.value.trim()) {\r\n            props.addList(e.target.value.trim(), newListId());\r\n            e.target.value = '';\r\n        }\r\n    };\r\n    //Render condicional del input de creación de nueva lista\r\n    let input;\r\n    if (props.headerInputDisplay) {\r\n        input = \r\n        <div className='inputContainer'>\r\n            <input\r\n                type='text'\r\n                placeholder='Type the new list name here and press enter'\r\n                onKeyUp={(e) => onKeyUpHandle(e)}\r\n                autoFocus\r\n            />\r\n        </div>;\r\n    }\r\n\r\n    return (\r\n        <div className='header'>\r\n            <div className='title'>Task me!</div>\r\n            <div className='listActions'>\r\n                <button onClick={() => props.displayHeaderInput()}>\r\n                    {props.headerInputDisplay ? 'Cancel' : '✚ Add list'}\r\n                </button>\r\n                {input}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    addList: addListAction(dispatch),\r\n    displayHeaderInput: displayHeaderInputAction(dispatch)\r\n});\r\n\r\nconst mapStateToProps = (state) => (\r\n    {\r\n        headerInputDisplay: state.headerInputDisplay,\r\n        lists: state.lists\r\n    }\r\n);\r\n\r\nconst connectedHeader = connect(mapStateToProps, mapDispatchToProps)(Header);\r\n\r\nexport default connectedHeader;","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addTodoAction, editTodoAction } from '../../services/redux/actions';\r\nimport './TodoForm.css';\r\n\r\nconst TodoForm = (props) => {\r\n    const [title, setTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    const handleTitleChange = event => {\r\n        setTitle(event.target.value);\r\n    }\r\n    const handleDescriptionChange = event => {\r\n        setDescription(event.target.value);\r\n    }\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        if (props.role === 'new') {\r\n            props.addTodo(title, description, props.listId);\r\n            console.log({ title: title, description: description, listId: props.listId });\r\n        } else {\r\n            props.editTodo(title,description, props.todoId, props.listId);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form className=\"todoForm\" onSubmit={handleSubmit}>\r\n            <input type=\"text\" name=\"title\" value={title} placeholder=\"Task name\" onChange={handleTitleChange} required autoFocus />\r\n            <input type=\"text\" name=\"description\" value={description} placeholder=\"Task description (optional)\" onChange={handleDescriptionChange} />\r\n            <button type=\"submit\">{props.role === 'new' ? 'Create it' : 'Update it'}</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    addTodo: addTodoAction(dispatch),\r\n    editTodo: editTodoAction(dispatch)\r\n});\r\n\r\nconst connectedForm = connect(\r\n    null,\r\n    mapDispatchToProps,\r\n)(TodoForm);\r\n\r\nexport default connectedForm;","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { editListAction } from '../../services/redux/actions';\r\nimport './ListForm.css';\r\n\r\nconst ListForm = (props) => {\r\n    const [title, setTitle] = useState('');\r\n\r\n    const handleTitleChange = event => {\r\n        setTitle(event.target.value);\r\n    }\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        props.editList(title,props.listId);\r\n    }\r\n    return (\r\n        <form className=\"listForm\" onSubmit={handleSubmit}>\r\n            <input type=\"text\" name=\"title\" value={title} placeholder=\"List name\" onChange={handleTitleChange} required autoFocus />\r\n            <button type=\"submit\">Update it</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    editList: editListAction(dispatch)\r\n});\r\n\r\nconst connectedForm = connect(\r\n    null,\r\n    mapDispatchToProps,\r\n)(ListForm);\r\n\r\nexport default connectedForm;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { deleteListAction, dragTodoAction, switchTodoPositionAction, deleteTodoAction, toggleCompleteAction, displayListInputAction, displayTodoEditInputAction, displayListEditInputAction } from '../../services/redux/actions';\r\nimport TodoForm from '../TodoForm/TodoForm';\r\nimport ListForm from '../ListForm/ListForm';\r\nimport './ListsPanel.css';\r\n\r\nconst ListsPanel = props => {\r\n    let draggedItem; //Donde almaceno la información del todo que voy a arrastrar\r\n    const handleDragStart = (todoText, todoDescription, todoId, todoCompleted, listId) => {\r\n        draggedItem = {\r\n            todoText: todoText,\r\n            todoDescription: todoDescription,\r\n            todoId: todoId,\r\n            todoCompleted: todoCompleted,\r\n            listId: listId\r\n        }\r\n    };\r\n    return (\r\n        <div className='panel'>\r\n            {props.lists.map(list => (\r\n                <div className='list' key={list.listId}\r\n                    onDragOver={e => e.preventDefault()}\r\n                    onDragEnter={e => e.preventDefault()}\r\n                    onDrop={() => props.dragTodo(draggedItem.todoText, draggedItem.todoDescription, draggedItem.todoId, draggedItem.todoCompleted, draggedItem.listId, list.listId)}>\r\n                    <div className='heading'>\r\n                        <div className='name'>\r\n                            {list.text}\r\n                        </div>\r\n                        <div className='actions'>\r\n                            <button className='edit' onClick={() => props.displayListEditInput(list.listId)}>\r\n                                {!list.listEditionInputDisplay ? '✎' : '↩'}\r\n                            </button>\r\n                            <button className='delete' onClick={() => props.deleteList(list.listId)}>\r\n                                {'✘'}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div className='listEditInput'>\r\n                        {list.listEditionInputDisplay ? <ListForm listId={list.listId} /> : null}\r\n                    </div>\r\n                    <div className='todos'>\r\n                        {\r\n                            list.todos.map(todo => (\r\n                                <div\r\n                                    className={`task ${todo.completed ? 'completed' : ''\r\n                                        }`}\r\n                                    key={todo.id}\r\n                                    draggable\r\n                                    onDragStart={() => handleDragStart(todo.text, todo.description, todo.id, todo.completed, list.listId)}\r\n                                    onDragOver={e => e.preventDefault()}\r\n                                    onDragEnter={e => e.preventDefault()}\r\n                                    onDrop={() => props.switchTodoPosition(draggedItem.todoText, todo.text, draggedItem.todoDescription, todo.description, draggedItem.todoId, todo.id, draggedItem.todoCompleted, todo.completed, draggedItem.listId, list.listId)}\r\n                                >\r\n                                    <div className='data'>\r\n                                        <h5 className='text'>{todo.text}</h5>\r\n                                        <p className='description'>{todo.description}</p>\r\n                                    </div>\r\n                                    <div className='actions'>\r\n                                        <button\r\n                                            onClick={() => props.toggleCompleted(todo.id, list.listId)}\r\n                                        >\r\n                                            {!todo.completed ? '☐' : '☑'}\r\n                                        </button>\r\n                                        <button className='edit' onClick={() => props.displayTodoEditInput(todo.id, list.listId)}>\r\n                                            {!todo.editInputDisplay ? '✎' : '↩'}\r\n                                        </button>\r\n                                        <button className='delete' onClick={() => props.deleteTodo(todo.id, list.listId)}>\r\n                                            {'✘'}\r\n                                        </button>\r\n                                    </div>\r\n                                    {todo.editInputDisplay ? <TodoForm role={'edit'} listId={list.listId} todoId={todo.id} /> : null}\r\n                                </div>\r\n                            )\r\n                            )\r\n                        }\r\n                        <div className='add'>\r\n                            {list.listInputDisplay ? <TodoForm role={'new'} listId={list.listId} /> : null}\r\n                            <button onClick={() => props.displayListInput(list.listId)}>\r\n                                {!list.listInputDisplay ? '✚ Add todo' : '↩ Cancel'}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n            )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    lists: state.lists,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    deleteList: deleteListAction(dispatch),\r\n    deleteTodo: deleteTodoAction(dispatch),\r\n    dragTodo: dragTodoAction(dispatch),\r\n    switchTodoPosition: switchTodoPositionAction(dispatch),\r\n    toggleCompleted: toggleCompleteAction(dispatch),\r\n    displayListInput: displayListInputAction(dispatch),\r\n    displayTodoEditInput: displayTodoEditInputAction(dispatch),\r\n    displayListEditInput: displayListEditInputAction(dispatch)\r\n});\r\n\r\nconst connectedPanel = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(ListsPanel);\r\n\r\nexport default connectedPanel;","import React from 'react';\nimport Header from './components/Header/Header';\nimport ListsPanel from './components/ListsPanel/ListsPanel';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <ListsPanel/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    headerInputDisplay: false,\r\n    lists: [\r\n        {\r\n            text: 'lista demo 1',\r\n            listId: 0,\r\n            listEditionInputDisplay: false,\r\n            listInputDisplay: false,\r\n            todos: [\r\n                {\r\n                    text: 'tarea demo 1',\r\n                    description: 'descripción tarea demo 1',\r\n                    id: 1,\r\n                    completed: true,\r\n                    editInputDisplay: false\r\n                },\r\n                {\r\n                    text: 'tarea demo 2',\r\n                    description: 'descripción tarea demo 2',\r\n                    id: 2,\r\n                    completed: false,\r\n                    editInputDisplay: false\r\n                },\r\n                {\r\n                    text: 'tarea demo 3',\r\n                    description: 'descripción tarea demo 3',\r\n                    id: 3,\r\n                    completed: true,\r\n                    editInputDisplay: false\r\n                },\r\n            ],\r\n        }\r\n    ]\r\n};\r\n\r\nfunction reducer(state = initialState, action) {\r\n    console.log('reducer. action:', action);\r\n\r\n    switch (action.type) {\r\n        case 'ADD_LIST':\r\n            return {\r\n                ...state,\r\n                headerInputDisplay: false,\r\n                lists: [\r\n                    ...state.lists,\r\n                    {\r\n                        text: action.payload,\r\n                        listId: action.listId,\r\n                        listInputDisplay: false,\r\n                        todos: []\r\n                    },\r\n                ],\r\n            };\r\n        case 'EDIT_LIST':\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(\r\n                    (list) => {\r\n                        if (list.listId === action.listId) {\r\n                            list.text = action.payload;\r\n                            list.listEditionInputDisplay = false;\r\n                        }\r\n                        return list;\r\n                    }\r\n                )\r\n            };\r\n        case 'DELETE_LIST':\r\n            return {\r\n                ...state,\r\n                lists: state.lists.filter(\r\n                    (list) => list.listId !== action.listId,\r\n                ),\r\n            };\r\n        case 'ADD_TODO':\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(\r\n                    (list) => {\r\n                        if (list.listId === action.listId) {\r\n                            list.todos = [\r\n                                ...state.lists[action.listId].todos,\r\n                                {\r\n                                    text: action.title,\r\n                                    description: action.description,\r\n                                    id: action.todoId,\r\n                                    completed: action.completed || false,\r\n                                    editInputDisplay: false\r\n                                }\r\n                            ];\r\n                            list.listInputDisplay = false;\r\n                        }\r\n                        return list;\r\n                    }\r\n                )\r\n            };\r\n        case 'EDIT_TODO':\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(\r\n                    (list) => {\r\n                        if (list.listId === action.listId) {\r\n                            list.todos.map(\r\n                                (todo) => {\r\n                                    if (todo.id === action.todoId) {\r\n                                        todo.text = action.title;\r\n                                        todo.description = action.description;\r\n                                        todo.editInputDisplay = false;\r\n                                    }\r\n                                    return todo;\r\n                                }\r\n                            )\r\n                        }\r\n                        return list;\r\n                    }\r\n                )\r\n            };\r\n        case 'DRAG_TODO_TO_OTHER_LIST':\r\n            let newStateDrag = {\r\n                ...state,\r\n                lists: [\r\n                    ...state.lists\r\n                ]\r\n            };\r\n            newStateDrag.lists[action.prevListId] = {\r\n                text: state.lists[action.prevListId].text,\r\n                listId: action.prevListId,\r\n                listInputDisplay: false,\r\n                listEditionInputDisplay: false,\r\n                todos: state.lists[action.prevListId].todos.filter(todo => todo.id !== action.todoId)\r\n            };\r\n            newStateDrag.lists[action.newListId] = {\r\n                text: state.lists[action.newListId].text,\r\n                listId: action.newListId,\r\n                listInputDisplay: false,\r\n                listEditionInputDisplay: false,\r\n                todos: [\r\n                    ...state.lists[action.newListId].todos,\r\n                    {\r\n                        text: action.todoText,\r\n                        description: action.todoDescription,\r\n                        id: action.todoId,\r\n                        completed: action.todoCompleted || false,\r\n                        editInputDisplay: false\r\n                    }\r\n                ]\r\n            };\r\n            return newStateDrag;\r\n        case 'SWITCH_TODOS_IN_SAME_LIST':\r\n            let newStateSwitch = {\r\n                ...state,\r\n                lists: [\r\n                    ...state.lists\r\n                ]\r\n            };\r\n            let firstTodoSwitch = {\r\n                text: action.startTodoText,\r\n                description: action.startTodoDescription,\r\n                id: action.startTodoId,\r\n                completed: action.startTodoCompleted,\r\n                editInputDisplay: false\r\n            };\r\n            let indexOfFirstTodoSwitch = state.lists[action.prevListId].todos.findIndex(element => element.text === firstTodoSwitch.text);\r\n            let secondTodoSwitch = {\r\n                text: action.endTodoText,\r\n                description: action.endTodoDescription,\r\n                id: action.endTodoId,\r\n                completed: action.endTodoCompleted,\r\n                editInputDisplay: false\r\n            };\r\n            let indexOfSecondTodoSwitch = state.lists[action.prevListId].todos.findIndex(element => element.text === secondTodoSwitch.text);\r\n            newStateSwitch.lists[action.prevListId].todos[indexOfFirstTodoSwitch] = secondTodoSwitch;\r\n            newStateSwitch.lists[action.prevListId].todos[indexOfSecondTodoSwitch] = firstTodoSwitch;\r\n            return newStateSwitch;\r\n        case 'DELETE_TODO':\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(\r\n                    (list) => {\r\n                        if (list.listId === action.listId) {\r\n                            list.todos =  list.todos.filter(todo => todo.id !== action.todoId);\r\n                        }\r\n                        return list;\r\n                    }\r\n                )\r\n            };\r\n        case 'TOGGLE_COMPLETED_TODO':\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(\r\n                    (list) => {\r\n                        if (list.listId === action.listId) {\r\n                            list.todos.map(\r\n                                (todo) => {\r\n                                    if (todo.id === action.todoId) {\r\n                                        todo.completed = !todo.completed;\r\n                                    }\r\n                                    return todo;\r\n                                }\r\n                            )\r\n                        }\r\n                        return list;\r\n                    }\r\n                )\r\n            };\r\n        case 'TOGGLE_DISPLAY_HEADER_INPUT':\r\n            return {\r\n                ...state,\r\n                headerInputDisplay: !state.headerInputDisplay,\r\n            };\r\n        case 'TOGGLE_DISPLAY_LIST_INPUT':\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(\r\n                    (list) => {\r\n                        if (list.listId === action.listId) {\r\n                            list.listInputDisplay = !list.listInputDisplay;\r\n                        }\r\n                        return list;\r\n                    }\r\n                )\r\n            };\r\n        case 'TOGGLE_DISPLAY_TODO_EDIT_INPUT':\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(\r\n                    (list) => {\r\n                        if (list.listId === action.listId) {\r\n                            list.todos.map(\r\n                                (todo) => {\r\n                                    if (todo.id === action.todoId) {\r\n                                        todo.editInputDisplay = !todo.editInputDisplay;\r\n                                    }\r\n                                    return todo;\r\n                                }\r\n                            )\r\n                        }\r\n                        return list;\r\n                    }\r\n                )\r\n            };\r\n        case 'TOGGLE_DISPLAY_LIST_EDIT_INPUT':\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(\r\n                    (list) => {\r\n                        if (list.listId === action.listId) {\r\n                            list.listEditionInputDisplay = !list.listEditionInputDisplay;\r\n                        }\r\n                        return list;\r\n                    }\r\n                )\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import {createStore } from 'redux';\r\nimport reducer from './reducer.js'\r\n\r\n\r\nconst store = createStore(reducer);\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './services/redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}